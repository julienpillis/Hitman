from hitman.hitman import HC, HitmanReferee, complete_map_example, world_example, complete_map_example2
from pprint import pprint
from constraints import *
from phase2 import *
from pprint import pprint


def phase1_run(hr):
    #status = hr.turn_clockwise()
    status = hr.start_phase1()
    launch_solving(status['m'],status['n'],status['guard_count'],status['civil_count'])
    explore(hr, status)
    # pprint(hr.send_content({(0, 0): HC.EMPTY}))
    #pprint(hr.send_content(complete_map_example))
    # complete_map_example[(7, 0)] = HC.EMPTY
    # pprint(hr.send_content(complete_map_example))


def phase2_run(hr):
    status = hr.start_phase2()
    state_t = initial_state(complete_map_example,status['position'],status['orientation'],status['m'],status['n'])
    path,cost = astar(state_t)
    for action in path:
        if(action==Action.turn_clockwise):
            status = hr.turn_clockwise()
            print(status)
        elif (action == Action.turn_anticlockwise):
            status = hr.turn_anti_clockwise()
            print(status)
        elif (action == Action.move):
            status = hr.move()
            print(status)
        elif (action == Action.kill_target):
            status = hr.kill_target()
            print(status)
        elif(action == Action.grab_wire):
            status = hr.take_weapon()
            print(status)
        elif (action == Action.kill_civil):
            status = hr.neutralize_civil()
            print(status)
        elif (action == Action.kill_guard):
            status = hr.neutralize_guard()
            print(status)
        print(action)
    print(status)
    """
    status = hr.move()
    pprint(status)
    status = hr.turn_clockwise()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.turn_anti_clockwise()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.neutralize_guard()
    pprint(status)
    status = hr.turn_anti_clockwise()
    pprint(status)
    status = hr.neutralize_guard()
    pprint(status)
    status = hr.turn_clockwise()
    pprint(status)
    status = hr.turn_clockwise()
    pprint(status)
    status = hr.neutralize_civil()
    pprint(status)
    status = hr.turn_clockwise()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.turn_anti_clockwise()
    pprint(status)
    status = hr.take_weapon()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.take_weapon()
    pprint(status)
    status = hr.turn_clockwise()
    pprint(status)
    status = hr.turn_clockwise()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.turn_clockwise()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.turn_anti_clockwise()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.turn_clockwise()
    pprint(status)
    status = hr.neutralize_guard()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.turn_anti_clockwise()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.turn_anti_clockwise()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.kill_target()
    pprint(status)
    status = hr.turn_anti_clockwise()
    pprint(status)
    status = hr.turn_anti_clockwise()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.turn_clockwise()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.turn_clockwise()
    pprint(status)
    pprint(hr.end_phase2())
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.turn_clockwise()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.move()
    pprint(status)
    status = hr.turn_anti_clockwise()
    pprint(status)
    status = hr.move()
    pprint(status)
    """


def main():
    hr = HitmanReferee()
    status = hr.start_phase1()
    pprint(status)
    #phase1_run(hr)
    #_, score, history, true_map = hr.end_phase1()
    #pprint(score)
    #pprint(true_map)
    #pprint(history)
    #status = hr.start_phase2()
    #pprint(status)
    phase2_run(hr)
    #_, score, history = hr.end_phase2()
    #pprint(score)
    #pprint(history)


if __name__ == "__main__":
    main()




"""
def main():
    print("***********************INIT*****************************")
    hr = HitmanReferee()
    status = hr.start_phase1()
    pprint(status)
    launch_solving(status['m'],status['n'],status['guard_count'],status['civil_count'])
    print("********************************************************")
    #print(cell_to_variable((0,1), HC.GUARD_N))
    #print(variable_to_cell(92))
    #print(variable_to_cell(cell_to_variable((0, 6), HC.EMPTY)))
    #dimacs = clauses_to_dimacs(generate_constraints()+constraints_listener((0,0),0) + [[-cell_to_variable((6,4), HC.GUARD_N)]], 7,header=True)
    #write_dimacs_file(dimacs, "hitman.cnf")
    #print(exec_gophersat("hitman.cnf")[0])
    #rebuild(exec_gophersat("hitman.cnf")[1])
    explore(hr,status)

"""

